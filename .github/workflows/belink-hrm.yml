name: 'CI/CD: Belink HRM'

on:
  repository_dispatch:
    types:
      - BelinkHrm-*

env:
  APP_NAME: Belink HRM
  SOURCE_REPOSITORY: LibertyHRM/rn-hrm-mobile

  GIT_SSH_COMMAND: ${{ vars.GIT_SSH_COMMAND }}
  UTILS_SH: ${{ vars.UTILS_SH_FILE }}

  BUILD_MATRIX: '${{ vars.BUILD_MATRIX }}'
  BUILD_MATRIX_PRD: '${{ vars.BUILD_MATRIX_PRD }}'

  GH_PAT: ${{ secrets.GH_PAT }}
  REF_NAME: ${{ github.event.client_payload.ref_name }}
  TRIGGERING_ACTOR: ${{ github.event.client_payload.triggering_actor }}
  FIREBASE_CLI_TOKEN: ${{ secrets.FIREBASE_CLI_TOKEN }}

  TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
  TELEGRAM_GROUP_ID: ${{ vars.TELEGRAM_GROUP_ID }}
  TELEGRAM_TOPIC_ID: ${{ vars.TELEGRAM_TOPIC_ID }}

jobs:
  init:
    name: Init
    runs-on: ubuntu-22.04
    outputs:
      matrix: ${{ steps.set-matrix.outputs.value }}
      env: ${{ steps.set-env.outputs.value }}
      message-information: ${{ steps.get-message-information.outputs.value }}
      app-version: ${{ steps.get-app-infomation.outputs.version-value }}
      app-build-number: ${{ steps.get-app-infomation.outputs.build-number-value }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: ${{ env.SOURCE_REPOSITORY }}
          token: ${{ env.GH_PAT }}
          ref: ${{ github.event.client_payload.ref_name}}

      - name: Checkout secret
        uses: actions/checkout@v4
        with:
          repository: ItLibertyTechnology/secret
          token: ${{ env.GH_PAT }}
          path: .github/data/key

      - name: Set matrix
        id: set-matrix
        run: |
          MATRIX="${{ toJson(env.BUILD_MATRIX) }}"
          if [[ "$REF_NAME" =~ "prd" ]]; then
            MATRIX="${{ toJson(env.BUILD_MATRIX_PRD) }}"
          elif [[ "$REF_NAME" =~ "merchant" ]]; then
            MATRIX="${{ toJson(env.BUILD_MATRIX_PRD) }}"
          fi
          # ios only
          echo "value=$MATRIX" >> $GITHUB_OUTPUT

      - name: Set env
        id: set-env
        run: |
          ENV='dev'
          if [[ "$REF_NAME" =~ "prd" ]]; then
            ENV='prd'
          elif [[ "$REF_NAME" =~ "stg" ]]; then
            ENV='stg'
          elif [[ "$REF_NAME" =~ "merchant" ]]; then
            ENV='merchant'
          fi
          echo "value=$ENV" >> $GITHUB_OUTPUT

      - name: Generate message
        id: get-message-information
        timeout-minutes: 1
        run: |
          source /dev/stdin <<<"$(curl -s ${{ env.UTILS_SH }})" 
          echo "value=$(get_message_information)" >> "$GITHUB_OUTPUT"

      - name: Generate app information
        id: get-app-infomation
        timeout-minutes: 1
        run: |
          source /dev/stdin <<<"$(curl -s ${{ env.UTILS_SH }})" 
          echo "version-value=$(get_version)" >> "$GITHUB_OUTPUT" 
          echo "build-number-value=$(get_build_number)" >> "$GITHUB_OUTPUT"

      - name: Send telegram message
        if: vars.IS_SILENT != 'true'
        uses: tuanngocptn/macos-telegram-action@v1
        with:
          type: topic
          message: "ðŸŽ¬ -  Start build: ${{ steps.get-message-information.outputs.value }}"

      - name: Log value
        run: |
          echo "tag-source: $REF_NAME"
          echo "matrix: ${{ steps.set-matrix.outputs.value }}"
          echo "message-information: ${{ steps.get-message-information.outputs.value }}"
          echo "version: ${{ steps.get-app-infomation.outputs.version-value }}"
          echo "build number: ${{ steps.get-app-infomation.outputs.build-number-value }}"
          echo "env: ${{ steps.set-env.outputs.value }}"

  deploy:
    name: Deployment ${{ matrix.format }}
    needs: [init]
    continue-on-error: true
    strategy:
      fail-fast: true
      matrix:
        include: ${{ fromJson(needs.init.outputs.matrix) }}
    runs-on: ${{ matrix.name }}
    env:
      APP_VARIANT: ${{ needs.init.outputs.env }}
      APP_VERSION: ${{ needs.init.outputs.app-version }}
      APP_BUILD_NUMBER: ${{ needs.init.outputs.app-build-number }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: ${{ env.SOURCE_REPOSITORY }}
          token: ${{ env.GH_PAT }}
          ref: ${{ github.event.client_payload.ref_name}}

      - name: Checkout secret
        uses: actions/checkout@v4
        with:
          repository: ItLibertyTechnology/secret
          token: ${{ env.GH_PAT }}
          path: .github/data/key

      # - name: Setup env
      #   run: mv config/env/.env.${{ env.APP_VARIANT }} .env

      - name: Setup nodejs
        uses: actions/setup-node@v4
        with:
          cache: "yarn"
          node-version-file: ".nvmrc"

      - name: Setup ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Install fastlane plugins
        run: bundle exec fastlane install_plugins

      - name: Cache node_module
        id: cache-node-module
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ matrix.platform }}-cache-node-module-${{ hashFiles('yarn.lock') }}

      - name: Run yarn install
        if: steps.cache-node-module.outputs.cache-hit != 'true'
        uses: borales/actions-yarn@v5
        with:
          cmd: install

      - name: Set up JDK
        uses: actions/setup-java@v4
        if: matrix.platform == 'android'
        with:
          java-version: 21
          distribution: "temurin"
          cache: "gradle"

      - name: Setup Android SDK
        if: matrix.platform == 'android'
        uses: android-actions/setup-android@v3

      - name: Fastlane match
        if: matrix.platform == 'ios'
        # run: bundle exec fastlane ios certificates && bundle exec fastlane ios update_settings
        run: bundle exec fastlane ios certificates
      - name: Update version and build number
        run: bundle exec fastlane ${{ matrix.platform }} update_version_and_build_number

      - name: Setup config
        run: .github/data/scripts/load_build.sh

      - name: Check cache Pods
        if: matrix.platform == 'IOS'
        id: cache-pods
        uses: actions/cache@v4
        with:
          path: |
            ios/Pods
            ios/Podfile.lock
          key: belink-hrm-cache-pods-${{ hashFiles('ios/Podfile.lock') }}        

      - name: Pod install
        # if: ${{ (matrix.format == 'IPA') && (steps.cache-primes.outputs.cache-hit != 'true') }}
        if: matrix.format == 'IPA'
        working-directory: ios
        run: bundle exec pod install
      - name: Build ${{ matrix.format }}
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 60
          max_attempts: 2
          command: bundle exec fastlane ${{ matrix.platform }} build_${{ matrix.format }}

      - name: Deploy ${{ matrix.format }}
        run: bundle exec fastlane ${{ matrix.platform }} deploy_${{ matrix.format }}

      - name: Send telegram message
        if: vars.IS_SILENT != 'true'
        uses: tuanngocptn/macos-telegram-action@v1
        with:
          type: topic
          message: "âœ… - Success ${{ matrix.format }}: ${{ needs.init.outputs.message-information }}"

      - name: Send telegram message failure
        if: ${{ failure() && vars.IS_SILENT != 'true' }}
        uses: tuanngocptn/macos-telegram-action@v1
        with:
          type: topic
          message: "ðŸ’¥ - Failure ${{ matrix.format }}: ${{ needs.init.outputs.message-information }}"

      - uses: actions/upload-artifact@v4
        if: ${{ "$REF_NAME" =~ "merchant" }}
        with:
          name: Upload merchant aab
          path: ./build/android/outputs/bundle/merchantRelease/app-merchant-release.aab
