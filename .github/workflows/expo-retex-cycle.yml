name: 'CI/CD: ThuanLoiRubber'

on:
  repository_dispatch:
    types:
      - ThuanLoiRubber-*

env:
  APP_NAME: TXNG - Cao su Thuáº­n Lá»£i
  SOURCE_REPOSITORY: ThuanLoiRubber/expo-retex-cycle
  DISABLE_NODE_CACHE: 'false'
  DISABLE_IOS_CACHE: 'true'

  GIT_SSH_COMMAND: ${{ vars.GIT_SSH_COMMAND }}
  UTILS_SH: ${{ vars.UTILS_SH_FILE }}

  BUILD_MATRIX: '${{ vars.BUILD_MATRIX }}'
  BUILD_MATRIX_PRD: '${{ vars.BUILD_MATRIX_PRD }}'

  GH_PAT: ${{ secrets.GH_PAT }}
  REF_NAME: ${{ github.event.client_payload.ref_name }}
  TRIGGERING_ACTOR: ${{ github.event.client_payload.triggering_actor }}
  FIREBASE_CLI_TOKEN: ${{ secrets.FIREBASE_CLI_TOKEN }}

  DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}

jobs:
  init:
    name: Init
    runs-on: ubuntu-22.04
    outputs:
      matrix: ${{ steps.set-matrix.outputs.value }}
      env: ${{ steps.set-env.outputs.value }}
      message-information: ${{ steps.get-message-information.outputs.value }}
      app-version: ${{ steps.get-app-infomation.outputs.version-value }}
      app-build-number: ${{ steps.get-app-infomation.outputs.build-number-value }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: ${{ env.SOURCE_REPOSITORY }}
          token: ${{ env.GH_PAT }}
          ref: ${{ github.event.client_payload.ref_name}}

      - name: Checkout secret
        uses: actions/checkout@v4
        with:
          repository: ItLibertyTechnology/secret
          token: ${{ env.GH_PAT }}
          path: .github/data/key

      - name: Set matrix
        id: set-matrix
        run: |
          MATRIX="${{ toJson(env.BUILD_MATRIX) }}"
          if [[ "$REF_NAME" =~ "prd" ]]; then
            MATRIX="${{ toJson(env.BUILD_MATRIX_PRD) }}"
          fi
          echo "value=$MATRIX" >> $GITHUB_OUTPUT

      - name: Set env
        id: set-env
        run: |
          ENV='dev'
          if [[ "$REF_NAME" =~ "prd" ]]; then
            ENV='prd'
          elif [[ "$REF_NAME" =~ "stg" ]]; then
            ENV='stg'
          fi
          echo "value=$ENV" >> $GITHUB_OUTPUT

      - name: Generate message
        id: get-message-information
        timeout-minutes: 1
        run: |
          source /dev/stdin <<<"$(curl -s ${{ env.UTILS_SH }})" 
          echo "value=$(get_message_information)" >> "$GITHUB_OUTPUT"

      - name: Generate app information
        id: get-app-infomation
        timeout-minutes: 1
        run: |
          source /dev/stdin <<<"$(curl -s ${{ env.UTILS_SH }})" 
          echo "version-value=$(get_version)" >> "$GITHUB_OUTPUT" 
          echo "build-number-value=$(get_build_number)" >> "$GITHUB_OUTPUT"

      - name: Send message
        uses: tuanngocptn/discord-action@main
        with:
          message: 'ðŸŽ¬ -  Start build: ${{ steps.get-message-information.outputs.value }}'

      - name: Log value
        run: |
          echo "tag-source: $REF_NAME"
          echo "matrix: ${{ steps.set-matrix.outputs.value }}"
          echo "message-information: ${{ steps.get-message-information.outputs.value }}"
          echo "version: ${{ steps.get-app-infomation.outputs.version-value }}"
          echo "build number: ${{ steps.get-app-infomation.outputs.build-number-value }}"
          echo "env: ${{ steps.set-env.outputs.value }}"

  deploy:
    name: Deployment ${{ matrix.format }}
    needs: [init]
    continue-on-error: true
    strategy:
      fail-fast: true
      matrix:
        include: ${{ fromJson(needs.init.outputs.matrix) }}
    runs-on: ${{ matrix.name }}
    env:
      NODE_ENV: ${{ needs.init.outputs.env }}
      APP_VERSION: ${{ needs.init.outputs.app-version }}
      APP_BUILD_NUMBER: ${{ needs.init.outputs.app-build-number }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: ${{ env.SOURCE_REPOSITORY }}
          token: ${{ env.GH_PAT }}
          ref: ${{ github.event.client_payload.ref_name}}

      - name: Checkout secret
        uses: actions/checkout@v4
        with:
          repository: ItLibertyTechnology/secret
          token: ${{ env.GH_PAT }}
          path: .github/data/key

      - name: Setup env
        run: mv config/env/.env.${{ env.NODE_ENV }} .env

      - name: Setup nodejs
        uses: actions/setup-node@v4
        with:
          cache: 'yarn'
          node-version-file: '.nvmrc'

      - name: Setup ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Install fastlane plugins
        run: bundle exec fastlane install_plugins

      - name: Cache node_module
        if: env.DISABLE_NODE_CACHE != 'true'
        id: cache-node-module
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ matrix.platform }}-cache-node-module-${{ hashFiles('app.config.js') }}-${{ hashFiles('yarn.lock') }}

      - name: Run yarn install
        if: env.DISABLE_NODE_CACHE == 'true' || steps.cache-node-module.outputs.cache-hit != 'true'
        uses: borales/actions-yarn@v5
        with:
          cmd: install --network-concurrency 1

      - name: Cache ios folder
        if: matrix.platform == 'ios' && env.DISABLE_IOS_CACHE != 'true'
        id: cache-prebuild
        uses: actions/cache@v4
        with:
          path: ios
          key: ${{ matrix.platform }}-${{ env.NODE_ENV }}-prebuild-v2-${{ hashFiles('app.config.js', 'package.json', 'expo.json', '.expo/**') }}-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ matrix.platform }}-${{ env.NODE_ENV }}-prebuild-v2-${{ hashFiles('app.config.js', 'package.json', 'expo.json') }}-
            ${{ matrix.platform }}-${{ env.NODE_ENV }}-prebuild-v2-

      - name: Set up JDK
        uses: actions/setup-java@v4
        if: matrix.platform == 'android'
        with:
          java-version: 21
          distribution: 'temurin'
          cache: 'gradle'

      - name: Setup Android SDK
        if: matrix.platform == 'android'
        uses: android-actions/setup-android@v3

      # the dump thing from shit
      # - name: Cache ios deriveddata
      #   uses: irgaly/xcode-cache@v1
      #   if: matrix.platform == 'ios'
      #   with:
      #     key: xcode-cache-deriveddata-${{ env.NODE_ENV }}-${{ github.workflow }}-${{ github.sha }}
      #     restore-keys: xcode-cache-deriveddata-${{ env.NODE_ENV }}-${{ github.workflow }}-

      - name: Run expo prebuild ${{ matrix.platform }}
        if: ${{ (matrix.platform == 'android') || (env.DISABLE_IOS_CACHE == 'true') || (steps.cache-prebuild.outputs.cache-hit != 'true') }}
        uses: borales/actions-yarn@v5
        with:
          cmd: prebuild:${{ env.NODE_ENV }} --platform ${{ matrix.platform }} --clean

      - name: Fastlane match
        if: matrix.platform == 'ios'
        run: bundle exec fastlane ios certificates && bundle exec fastlane ios update_settings

      - name: Update version and build number
        run: bundle exec fastlane ${{ matrix.platform }} update_version_and_build_number

      - name: Build ${{ matrix.format }}
        run: bundle exec fastlane ${{ matrix.platform }} build_${{ matrix.format }}

      - name: Deploy ${{ matrix.format }}
        run: bundle exec fastlane ${{ matrix.platform }} deploy_${{ matrix.format }}

      - name: Send message
        uses: tuanngocptn/discord-action@main
        with:
          message: 'âœ… - Success ${{ matrix.format }}: ${{ needs.init.outputs.message-information }}'

      - name: Send message
        if: failure()
        uses: tuanngocptn/discord-action@main
        with:
          message: 'ðŸ’¥ - Failure ${{ matrix.format }}: ${{ needs.init.outputs.message-information }}'
